{"version":3,"sources":["components/Header.js","components/Book.js","components/BookList.js","App.js","serviceWorker.js","index.js"],"names":["Header","style","headerStyle","Component","backgroundColor","color","padding","fontSize","Book","this","props","book","title","thumbnailUrl","isbn","pageCount","publishedDate","shortDescription","longDescription","status","console","log","bookStyle","alt","src","width","height","border","boxShadow","margin","BookList","books","map","key","display","justifyContent","flexWrap","App","state","fetch","then","res","json","setState","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+PAEaA,G,MAAb,iLAEI,OACE,4BAAQC,MAAOC,GACb,gDAJR,GAA4BC,cAStBD,EAAc,CAClBE,gBAAiB,UACjBC,MAAO,QACPC,QAAS,OACTC,SAAU,QAGGP,IChBFQ,EAAb,iLACY,IAAD,EAUHC,KAAKC,MAAMC,KARbC,EAFK,EAELA,MAIAC,GANK,EAGLC,KAHK,EAILC,UAJK,EAKLC,cALK,EAMLH,cANK,EAOLI,iBAPK,EAQLC,gBARK,EASLC,OAKF,OADAC,QAAQC,IAAIZ,KAAKC,MAAMC,MAErB,8BACIF,KAAKC,MAAMC,MAAQ,wCACpBF,KAAKC,MAAMC,MACV,yBAAKV,MAAOqB,GACV,yBACEC,IAAI,OACJC,IAAKX,EACLY,MAAM,QACNC,OAAO,UAET,2BACE,2BAAId,UA3BlB,GAA0BT,aA0CpBmB,EAAY,CAChBK,OAAQ,iBACRC,UAAW,sBACXC,OAAQ,qBACRvB,QAAS,sBACTF,gBAAiB,sBAEJI,IChDFsB,EAAb,iLAEI,OACE,yBAAK7B,MAAOqB,GACTb,KAAKC,MAAMqB,MAAMC,KAAI,SAAArB,GAAI,OACxB,kBAAC,EAAD,CAAMsB,IAAKtB,EAAKG,KAAMH,KAAMA,YALtC,GAA8BR,aAWxBmB,EAAY,CAChBY,QAAS,OACTC,eAAgB,gBAChBC,SAAU,QAEGN,ICKAO,EAnBf,2MACEC,MAAQ,CACNP,MAAO,IAFX,mFAIuB,IAAD,OAClBQ,MAAM,qCACHC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAT,GAAK,OAAI,EAAKY,SAAS,CAAEZ,eAPrC,+BAUI,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAUA,MAAOtB,KAAK6B,MAAMP,aAbpC,GAAyB5B,aCOLyC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMf,MAAK,SAAAgB,GACjCA,EAAaC,iB","file":"static/js/main.336808b2.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nexport class Header extends Component {\r\n  render() {\r\n    return (\r\n      <header style={headerStyle}>\r\n        <b>Book Library</b>\r\n      </header>\r\n    );\r\n  }\r\n}\r\nconst headerStyle = {\r\n  backgroundColor: \"#29303b\",\r\n  color: \"white\",\r\n  padding: \"15px\",\r\n  fontSize: \"20px\"\r\n};\r\n\r\nexport default Header;\r\n","import React, { Component } from \"react\";\r\n\r\nexport class Book extends Component {\r\n  render() {\r\n    const {\r\n      title,\r\n      isbn,\r\n      pageCount,\r\n      publishedDate,\r\n      thumbnailUrl,\r\n      shortDescription,\r\n      longDescription,\r\n      status\r\n    } = this.props.book;\r\n    // const{ame}=this.props.book.authors;\r\n    // const{ame}=this.props.book.categories;\r\n    console.log(this.props.book);\r\n    return (\r\n      <div>\r\n        {!this.props.book && <div>Loading</div>}\r\n        {this.props.book && (\r\n          <div style={bookStyle}>\r\n            <img\r\n              alt=\"book\"\r\n              src={thumbnailUrl}\r\n              width=\"200px\"\r\n              height=\"300px\"\r\n            ></img>\r\n            <p>\r\n              <b>{title}</b>\r\n            </p>\r\n            {/* <p>Published Date: {new Date(publishedDate).toDateString()}</p>}\r\n            {/* <p>ISBN: {isbn}</p>\r\n            <p>Page Count: {pageCount}</p>\r\n            <p>Thumbnail Url: {thumbnailUrl}</p>\r\n            <p>Short Description: {shortDescription}</p>\r\n            <p>Long Description: {longDescription}</p>\r\n            <p>Status: {status}</p> */}\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\nconst bookStyle = {\r\n  border: \"2px #ccc solid\",\r\n  boxShadow: \"10px 10px 18px grey\",\r\n  margin: \"10px 10px 20px 0px\",\r\n  padding: \"20px 20px 20px 20px\",\r\n  backgroundColor: \"rgb(236, 232, 232)\"\r\n};\r\nexport default Book;\r\n","import React, { Component } from \"react\";\r\nimport Book from \"./Book\";\r\n\r\nexport class BookList extends Component {\r\n  render() {\r\n    return (\r\n      <div style={bookStyle}>\r\n        {this.props.books.map(book => (\r\n          <Book key={book.isbn} book={book} />\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\nconst bookStyle = {\r\n  display: \"flex\",\r\n  justifyContent: \"space-between\",\r\n  flexWrap: \"wrap\"\r\n};\r\nexport default BookList;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Header from \"./components/Header\";\nimport BookList from \"./components/BookList\";\n\nexport class App extends Component {\n  state = {\n    books: []\n  };\n  componentDidMount() {\n    fetch(\"https://localhost:44368/api/books\")\n      .then(res => res.json())\n      .then(books => this.setState({ books }));\n  }\n  render() {\n    return (\n      <div>\n        <Header />\n        <BookList books={this.state.books} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}